{"version":3,"sources":["prediction.js"],"names":["tf","_interopRequireWildcard","require","predict_year","prediction","trainData","model","testPredictValue","regeneratorRuntime","async","_context","prev","next","xs","tensor2d","ys","sequential","add","layers","dense","units","inputShape","compile","loss","optimizer","summary","awrap","fit","predict","data","sent","stop"],"mappings":"mVACA,IAAAA,GAAAC,wBAAAC,QAAA,6oBAEA,IAAMC,aAAe,KACd,SAAeC,WAAWD,GAA1B,IAAAE,EAAAC,EAAAC,EAAAH,EAAA,OAAAI,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAEGP,EAAY,CACdQ,GAAIb,GAAGc,SAAS,EAAE,EAAK,EAAK,EAAK,EAAK,EAAK,GAAM,CAAC,EAAG,IACrDC,GAAIf,GAAGc,SAAS,EAAE,GAAM,EAAK,EAAK,EAAK,EAAK,GAAM,CAAC,EAAG,MAGpDR,EAAQN,GAAGgB,cACXC,IAAIjB,GAAGkB,OAAOC,MAAM,CACtBC,MAAO,EACPC,WAAY,CAAC,MAEjBf,EAAMgB,QAAQ,CAZXC,KAAenB,mBAAfoB,UAAA,QAAAlB,EAAAmB,UAAAf,EAAAE,KAAA,EAAAJ,mBAAAkB,MACHpB,EAAAqB,IAAAtB,EAAAQ,GAAAR,EAAAU,GAAA,CACMV,OAAAA,IACFQ,UAAOC,MAHR,KAAA,EAAA,OAQuBP,EAA1BP,GAAAc,SAAA,CAAAX,EAAA,MAAA,CAAA,EAAA,IARGO,EAAAE,KAAA,GAAAJ,mBAAAkB,MAYWpB,EAAAsB,QAAArB,GAAAsB,QAZX,KAAA,GAYHvB,EAZGI,EAAAoB,KAcCN,QAAAA,IAAAA,GAdD,KAAA,GAAA,IAAA,MAAA,OAAAd,EAAAqB","file":"prediction.min.js","sourcesContent":["\r\nimport * as tf from '@tensorflow/tfjs-node-gpu'\r\n\r\nconst predict_year = 1950;\r\nexport async function prediction(predict_year) {\r\n    // 1. Set data\r\n    const trainData = {\r\n        xs: tf.tensor2d([-1.0, 0.0, 1.0, 2.0, 3.0, 4.0], [6, 1]),\r\n        ys: tf.tensor2d([-3.0, -1.0, 2.0, 3.0, 5.0, 7.0], [6, 1])\r\n    }\r\n    // 2. Create a model\r\n    const model = tf.sequential()\r\n    model.add(tf.layers.dense({\r\n        units: 1,\r\n        inputShape: [1]\r\n    }))\r\n    model.compile({\r\n        loss: \"meanSquaredError\",\r\n        optimizer: \"sgd\"\r\n    })\r\n    model.summary()\r\n\r\n    // 3. Train model\r\n    await model.fit(trainData.xs, trainData.ys, {\r\n        epochs: 500,\r\n        callbacks: {\r\n            // onEpochEnd: (epoch, logs) => {\r\n            //     console.log(`Epoch: ${epoch} Loss: ${logs.loss}`);\r\n            // }\r\n        }\r\n    })\r\n\r\n    // 4. Make a prediction\r\n    const testPredictValue = tf.tensor2d([predict_year - 1980], [1, 1])\r\n    const prediction = await model.predict(testPredictValue).data()\r\n\r\n    console.log(prediction);\r\n}"]}