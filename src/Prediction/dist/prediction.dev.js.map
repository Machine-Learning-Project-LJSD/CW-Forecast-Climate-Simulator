{"version":3,"sources":["prediction.js"],"names":["predict_year","prediction","trainData","xs","tf","tensor2d","ys","model","sequential","add","layers","dense","units","inputShape","compile","loss","optimizer","summary","fit","epochs","callbacks","testPredictValue","predict","data","console","log"],"mappings":";;;;;;;;;AACA;;;;;;AAEA,IAAMA,YAAY,GAAG,IAArB;;AACO,SAAeC,UAAf,CAA0BD,YAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACH;AACME,UAAAA,SAFH,GAEe;AACdC,YAAAA,EAAE,EAAEC,EAAE,CAACC,QAAH,CAAY,CAAC,CAAC,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,CAAZ,EAA6C,CAAC,CAAD,EAAI,CAAJ,CAA7C,CADU;AAEdC,YAAAA,EAAE,EAAEF,EAAE,CAACC,QAAH,CAAY,CAAC,CAAC,GAAF,EAAO,CAAC,GAAR,EAAa,GAAb,EAAkB,GAAlB,EAAuB,GAAvB,EAA4B,GAA5B,CAAZ,EAA8C,CAAC,CAAD,EAAI,CAAJ,CAA9C;AAFU,WAFf,EAMH;;AACME,UAAAA,KAPH,GAOWH,EAAE,CAACI,UAAH,EAPX;AAQHD,UAAAA,KAAK,CAACE,GAAN,CAAUL,EAAE,CAACM,MAAH,CAAUC,KAAV,CAAgB;AACtBC,YAAAA,KAAK,EAAE,CADe;AAEtBC,YAAAA,UAAU,EAAE,CAAC,CAAD;AAFU,WAAhB,CAAV;AAIAN,UAAAA,KAAK,CAACO,OAAN,CAAc;AACVC,YAAAA,IAAI,EAAE,kBADI;AAEVC,YAAAA,SAAS,EAAE;AAFD,WAAd;AAIAT,UAAAA,KAAK,CAACU,OAAN,GAhBG,CAkBH;;AAlBG;AAAA,0CAmBGV,KAAK,CAACW,GAAN,CAAUhB,SAAS,CAACC,EAApB,EAAwBD,SAAS,CAACI,EAAlC,EAAsC;AACxCa,YAAAA,MAAM,EAAE,GADgC;AAExCC,YAAAA,SAAS,EAAE,CACP;AACA;AACA;AAHO;AAF6B,WAAtC,CAnBH;;AAAA;AA4BH;AACMC,UAAAA,gBA7BH,GA6BsBjB,EAAE,CAACC,QAAH,CAAY,CAACL,YAAY,GAAG,IAAhB,CAAZ,EAAmC,CAAC,CAAD,EAAI,CAAJ,CAAnC,CA7BtB;AAAA;AAAA,0CA8BsBO,KAAK,CAACe,OAAN,CAAcD,gBAAd,EAAgCE,IAAhC,EA9BtB;;AAAA;AA8BGtB,UAAAA,UA9BH;AAgCHuB,UAAAA,OAAO,CAACC,GAAR,CAAYxB,UAAZ;;AAhCG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["\r\nimport * as tf from '@tensorflow/tfjs-node-gpu'\r\n\r\nconst predict_year = 1950;\r\nexport async function prediction(predict_year) {\r\n    // 1. Set data\r\n    const trainData = {\r\n        xs: tf.tensor2d([-1.0, 0.0, 1.0, 2.0, 3.0, 4.0], [6, 1]),\r\n        ys: tf.tensor2d([-3.0, -1.0, 2.0, 3.0, 5.0, 7.0], [6, 1])\r\n    }\r\n    // 2. Create a model\r\n    const model = tf.sequential()\r\n    model.add(tf.layers.dense({\r\n        units: 1,\r\n        inputShape: [1]\r\n    }))\r\n    model.compile({\r\n        loss: \"meanSquaredError\",\r\n        optimizer: \"sgd\"\r\n    })\r\n    model.summary()\r\n\r\n    // 3. Train model\r\n    await model.fit(trainData.xs, trainData.ys, {\r\n        epochs: 500,\r\n        callbacks: {\r\n            // onEpochEnd: (epoch, logs) => {\r\n            //     console.log(`Epoch: ${epoch} Loss: ${logs.loss}`);\r\n            // }\r\n        }\r\n    })\r\n\r\n    // 4. Make a prediction\r\n    const testPredictValue = tf.tensor2d([predict_year - 1980], [1, 1])\r\n    const prediction = await model.predict(testPredictValue).data()\r\n\r\n    console.log(prediction);\r\n}"],"file":"prediction.dev.js"}